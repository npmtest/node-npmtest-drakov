{"/home/travis/build/npmtest/node-npmtest-drakov/test.js":"/* istanbul instrument in package npmtest_drakov */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-drakov/lib.npmtest_drakov.js":"/* istanbul instrument in package npmtest_drakov */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_drakov = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_drakov = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-drakov/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-drakov && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_drakov */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_drakov\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_drakov.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_drakov.rollup.js'] =\n            local.assetsDict['/assets.npmtest_drakov.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_drakov.__dirname + '/lib.npmtest_drakov.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/index.js":"var drakov = require('./lib/drakov');\n\nmodule.exports = {\n    run: drakov.run,\n    stop: drakov.stop,\n    middleware: require('./lib/middleware')\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/drakov.js":"var express = require('express');\nvar path = require('path');\nrequire('colors');\n\nvar logger = require('./logger');\nvar requestUtils = require('./middleware/request');\nvar setup = require('./setup');\nvar middleware = require('./middleware');\nvar debugRequest = require('./debugRequest');\n\nvar server = null;\n\nexports.run = function(argv, cb) {\n\n    logger.setStealthMode(argv.stealthmode);\n\n    console.log('   DRAKOV STARTED   '.green.bold.inverse);\n\n    var app = express();\n\n    // REQUEST MIDDLEWARE\n    app.use(requestUtils.logger);\n    app.use(requestUtils.getBody);\n\n    // SETUP RESPONSE MIDDLEWARE\n    argv.drakovHeader = true;\n    middleware.init(app, argv, function(err, middlewareFunction) {\n        if (err) {\n            throw err;\n        }\n\n        var discoverabilityModule;\n\n        app.use(middlewareFunction);\n        server = setup.startServer(argv, app, cb);\n        if (argv.discover && typeof argv.discover === 'string') {\n            discoverabilityModule = require(argv.discover);\n        } else {\n            app.set('views', path.join(__dirname, '..', 'views'));\n            app.set('view engine', 'jade');\n            discoverabilityModule = require('./middleware/discover');\n        }\n        if (argv.discover) {\n            app.get('/drakov', discoverabilityModule(argv));\n        }\n\n        //404\n        app.use(debugRequest.notFoundHandler(argv));\n    });\n};\n\nexports.stop = function(cb) {\n    var runCb = function() {\n        if (cb) {\n            cb();\n        }\n    };\n    try {\n        server.close(function() {\n            console.log('   DRAKOV STOPPED   '.red.bold.inverse);\n            runCb();\n        });\n    } catch (e) {\n        runCb();\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/logger.js":"require('colors');\n\nvar stealthMode = false;\n\nexports.setStealthMode = function(isStealthMode) {\n    stealthMode = isStealthMode;\n};\n\nexports.log = function() {\n    if (stealthMode) {\n        return;\n    }\n    console.log(Array.prototype.slice.call(arguments).join(' '));\n};\n\nexports.stringfy = function(matched) {\n  return matched ? 'MATCHED'.green : 'NOT_MATCHED'.red;\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/middleware/request.js":"require('colors');\nvar logger = require('../logger');\n\nexports.getBody = function(req, res, next) {\n    req.body = '';\n    req.on('data', function(chunk) {\n        req.body += chunk;\n    });\n    req.on('end', next);\n};\n\nexports.logger = function(req, res, next) {\n    logger.log('[LOG]'.white, req.method.green, req.url.yellow);\n    next();\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/setup.js":"var fs = require('fs');\nvar https = require('https');\n\nvar version = require('../package.json').version;\n\nexports.isSSL = false;\n\nexports.startServer = function (argv, app, cb) {\n\n    var startCb = function() {\n        console.log(('   Drakov ' + version + '     ').bold.inverse, 'Listening on port ' + argv.serverPort.toString().bold.red);\n        if (argv.stealthmode) {\n            console.log('   STEALTH MODE     '.grey.bold.inverse, 'running silently'.grey);\n        }\n\n        if (argv.public) {\n            console.log('   PUBLIC MODE     '.grey.bold.inverse, 'running publicly'.grey);\n        }\n\n        if (cb) {\n          cb();\n        }\n    };\n\n    var server = null;\n    if (argv.sslKeyFile && argv.sslCrtFile) {\n        exports.isSSL = true;\n        var sslOptions = {\n            key: fs.readFileSync(argv.sslKeyFile, 'utf8' ),\n            cert: fs.readFileSync(argv.sslCrtFile, 'utf8' ),\n            rejectUnauthorized: false\n        };\n        server = https.createServer(sslOptions, app);\n    } else {\n        server = app;\n    }\n\n    if (argv.public) {\n        return server.listen(argv.serverPort, startCb);\n    }\n    return server.listen(argv.serverPort, 'localhost', startCb);\n\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/middleware/index.js":"var routeHandlers = require('./route-handlers');\nvar responseUtils = require('./response');\nvar staticMiddleware = require('./static');\n\nvar bootstrapMiddleware = function(app, argv) {\n    if (argv.drakovHeader) {\n        app.use(responseUtils.drakovHeaders);\n    }\n    if (argv.staticPaths) {\n        staticMiddleware.setupRoutes(app, argv.staticPaths, argv.pathDelimiter);\n    }\n    app.use(responseUtils.corsHeaders(argv.disableCORS, argv.header));\n    app.use(responseUtils.delayedResponse(argv.delay));\n    app.use(responseUtils.allowMethods(argv.method));\n};\n\nexports.init = function(app, argv, cb) {\n    bootstrapMiddleware(app, argv);\n    var options = {sourceFiles: argv.sourceFiles,\n      autoOptions: argv.autoOptions,\n      ignoreHeaders: argv.ignoreHeader};\n    routeHandlers(options, function(err, middleware) {\n        cb(err, middleware);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/middleware/route-handlers.js":"var pathToRegexp = require('path-to-regexp');\nvar buildRouteMap = require('./route-map');\nvar filter = require('../handler-filter');\nvar logger = require('../logger');\n\nmodule.exports = function(options, cb) {\n    buildRouteMap(options, function(err, routeMap) {\n        if (err) {\n            return cb(err);\n        }\n\n        var middleware = function(req, res, next) {\n            var handler = null;\n\n            Object.keys(routeMap).forEach(function(urlPattern) {\n                if (handler) {\n                    return; // continue if we've already got handlers\n                }\n                var regex = pathToRegexp(urlPattern);\n\n                // req.path allows us to delegate query string handling to the route handler functions\n                var match = regex.exec(req.path);\n                logger.log('[MATCHING]'.yellow, 'by url pattern:', urlPattern.yellow, logger.stringfy(match));\n                if (match) {\n                    var handlers = routeMap[urlPattern].methods[req.method.toUpperCase()];\n                    handler = filter.filterHandlers(req, handlers, options.ignoreHeaders);\n                }\n            });\n\n            if (handler) {\n                handler.execute(req, res);\n            }\n\n            next();\n        };\n        cb(null, middleware);\n    });\n\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/middleware/route-map.js":"var glob = require('glob');\nvar async = require('async');\nvar parseBlueprint = require('../parse/blueprint');\nvar endpointSorter = require('./endpoint-sorter');\n\nmodule.exports = function(options, cb) {\n    var sourceFiles = options.sourceFiles;\n    var autoOptions = options.autoOptions;\n    var routeMap = {};\n\n    glob(sourceFiles, {} , function (err, files) {\n        if (err) {\n            console.error('Failed to parse contracts path.', err);\n            return cb(err);\n        }\n\n        var asyncFunctions = [];\n\n        files.forEach(function(filePath) {\n            asyncFunctions.push(parseBlueprint(filePath, autoOptions, routeMap));\n        });\n\n        async.series(asyncFunctions, function(err) {\n            cb(err, endpointSorter.sort(routeMap));\n        });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/parse/blueprint.js":"var fs = require('fs');\nvar drafter = require('drafter');\nvar _ = require('lodash');\nvar urlParser = require('./url');\nvar parseParameters = require('./parameters');\nvar parseAction = require('./action');\nvar autoOptionsAction = require('../json/auto-options-action.json');\n\nmodule.exports = function(filePath, autoOptions, routeMap) {\n    return function(cb) {\n        var data = fs.readFileSync(filePath, {encoding: 'utf8'});\n        var options = { type: 'ast' };\n        drafter.parse(data, options, function(err, result) {\n            if (err) {\n                console.log(err);\n                return cb(err);\n            }\n\n            var allRoutesList = [];\n            result.ast.resourceGroups.forEach(function(resourceGroup){\n                resourceGroup.resources.forEach(setupResourceAndUrl);\n            });\n\n            // add OPTIONS route where its missing - this must be done after all routes are parsed\n            if (autoOptions) {\n                addOptionsRoutesWhereMissing(allRoutesList);\n            }\n\n            cb();\n\n            function setupResourceAndUrl(resource) {\n                var parsedUrl = urlParser.parse(resource.uriTemplate);\n                var key = parsedUrl.url;\n                routeMap[key] = routeMap[key] || { urlExpression: key, methods: {} };\n                parseParameters(parsedUrl, resource.parameters, routeMap);\n                resource.actions.forEach(function(action){\n                    parseAction(parsedUrl, action, routeMap);\n                    saveRouteToTheList(parsedUrl, action);\n                });\n            }\n\n            /**\n             * Adds route and its action to the allRoutesList. It appends the action when route already exists in the list.\n             * @param resource Route URI\n             * @param action HTTP action\n             */\n            function saveRouteToTheList(parsedUrl, action) {\n                // used to add options routes later\n                if (typeof allRoutesList[parsedUrl.url] === 'undefined') {\n                    allRoutesList[parsedUrl.url] = [];\n                }\n                allRoutesList[parsedUrl.url].push(action);\n            }\n\n            function addOptionsRoutesWhereMissing(allRoutes) {\n                var routesWithoutOptions = [];\n                // extracts only routes without OPTIONS\n                _.forIn(allRoutes, function (actions, route) {\n                    var containsOptions = _.reduce(actions, function (previousResult, iteratedAction) {\n                        return previousResult || (iteratedAction.method === 'OPTIONS');\n                    }, false);\n                    if (!containsOptions) {\n                        routesWithoutOptions.push(route);\n                    }\n                });\n\n                _.forEach(routesWithoutOptions, function (uriTemplate) {\n                    // adds prepared OPTIONS action for route\n                    var parsedUrl = urlParser.parse(uriTemplate);\n                    parseAction(parsedUrl, autoOptionsAction, routeMap);\n                });\n            }\n        });\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/parse/url.js":"var qs = require('qs');\n\n//https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md#operators\nvar PARAMETER_OPERATORS_REGEX = /\\#|\\+|\\?/g;\nvar PATHNAME_REGEX = /\\{(.*?)\\}/g;\nvar URL_SPLIT_REGEX = /\\{?\\?/;\n\nexports.parse = function (url) {\n    var urlArr = url.split(URL_SPLIT_REGEX);\n\n    var processPathname = function(path){\n        return path.replace(PATHNAME_REGEX, ':$1');\n    };\n    var processQueryParameters = function(queryParams) {\n        if (!queryParams) {\n            return {};\n        }\n        return qs.parse(queryParams.replace(/\\{|\\}/g,'').replace(/\\,/g,'&').replace(PARAMETER_OPERATORS_REGEX, ''));\n    };\n\n    return {\n        uriTemplate: url,\n        queryParams: urlArr.length > 1 ? processQueryParameters(urlArr[1]) : {},\n        url: processPathname(urlArr[0])\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/parse/parameters.js":"\nmodule.exports = function(parsedUrl, parameters, routeMap) {\n    var parametersMap = {};\n\n    function addParameter(parameter) {\n        parametersMap[parameter.name] = parameter;\n    }\n\n    if (parameters && parameters.length) {\n        parameters.forEach(addParameter);\n        routeMap[parsedUrl.url].parameters = parametersMap;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/parse/action.js":"var route = require('../route');\n\nmodule.exports = function(parsedUrl, action, routeMap) {\n    var key = parsedUrl.url;\n\n    routeMap[key].methods[action.method] = routeMap[key].methods[action.method] || [];\n\n    var routeHandlers = route.getRouteHandlers(key, parsedUrl, action);\n    routeMap[key].methods[action.method] = routeMap[key].methods[action.method].concat(routeHandlers);\n    console.log('[LOG]'.white, 'Setup Route:', action.method.green, key.yellow, action.name.blue);\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/route.js":"var logger = require('./logger');\nvar specSchema = require('./spec-schema');\n\nexports.getRouteHandlers = function (method, parsedUrl, action) {\n     return action.examples.map(function (example) {\n        return {\n            action: action,\n            parsedUrl: parsedUrl,\n            response: example.responses[0],\n            request: 'undefined' === typeof example.requests[0] ? null : specSchema.validateAndParseSchema(example.requests[0]),\n            execute: function (req, res) {\n                var buildResponseBody = function(specBody){\n                    switch (typeof specBody) {\n                        case 'boolean':\n                        case 'number':\n                        case 'string':\n                            return new Buffer(specBody);\n                        case 'object':\n                            return new Buffer(JSON.stringify(specBody));\n                        default:\n                            return specBody;\n                    }\n                };\n\n                logger.log('[DRAKOV]'.red, action.method.green, parsedUrl.uriTemplate.yellow,\n                    (this.request && this.request.description ? this.request.description : action.name).blue);\n\n                this.response.headers.forEach(function (header) {\n                    res.set(header.name, header.value);\n                });\n\n                res.status(+this.response.name);\n                res.send(buildResponseBody(this.response.body));\n            }\n        };\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/spec-schema.js":"var tv4 = require('tv4');\nvar metaSchema = require('./json/meta-schema-v4');\n\nfunction validateSchema (schema){\n    if (metaSchema.$schema) {\n        tv4.addSchema('', metaSchema);\n        tv4.addSchema(metaSchema.$schema, metaSchema);\n    }\n\n    if (!tv4.validate(schema, metaSchema)) {\n        throw new Error('JSON schema is not valid! ' + tv4.error.message + ' at path \"' + tv4.error.dataPath + '\"');\n    }\n}\n\nexports.hasSchema =  function (spec){\n    return !!spec.schema;\n};\n\nexports.matchWithSchema = function (json, schema){\n    return tv4.validate(json, schema);\n};\n\nexports.validateAndParseSchema = function (spec){\n    if (this.hasSchema(spec)){\n        spec.schema = JSON.parse(spec.schema);\n        validateSchema(spec.schema);\n    }\n    return spec;\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/middleware/endpoint-sorter.js":"module.exports.sort = function(routeMap) {\n    function getBinaryFromUrl(url) {\n        return url.split('/').map(function (section) {\n            return section.indexOf(':') < 0 ? '1' : '0';\n        }).join('');\n    }\n\n    function getUrlWeight (url){\n        return parseInt(getBinaryFromUrl(url), 2);\n    }\n\n    return Object.keys(routeMap)\n        .map(function(key){\n            return {key: key, rank: getUrlWeight(key)};\n        }).sort(function(r1, r2){\n            return r2.rank - r1.rank;\n        }).reduce(function(prev, current){\n            prev[current.key] = routeMap[current.key];\n            return prev;\n        }, {});\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/handler-filter.js":"var content = require('./content');\nvar queryComparator = require('./query-comparator');\n\nvar filterRequestHeader = function (req, ignoreHeaders) {\n    return function (handler) {\n        return content.matchesHeader(req, handler.request, ignoreHeaders);\n    };\n};\n\nvar filterRequestBody = function (req) {\n    return function (handler) {\n        return content.matchesBody(req, handler.request);\n    };\n};\n\nvar filterSchema = function (req) {\n    return function (handler) {\n        return content.matchesSchema(req, handler.request);\n    };\n};\n\nexports.filterHandlers = function (req, handlers, ignoreHeaders) {\n    if (handlers) {\n        var filteredHandlers;\n\n        handlers.sort(content.contentTypeComparator);\n\n        var queryParams = req.query;\n        if (Object.keys(queryParams).length === 0) {\n            handlers.sort(queryComparator.noParamComparator);\n        } else {\n            queryComparator.countMatchingQueryParms(handlers, queryParams);\n            handlers.sort(queryComparator.queryParameterComparator);\n        }\n\n        filteredHandlers = handlers.filter(filterRequestHeader(req, ignoreHeaders));\n\n        var matchRequestBodyHandlers = filteredHandlers.filter(filterRequestBody(req));\n\n        if (matchRequestBodyHandlers.length > 0) {\n            return matchRequestBodyHandlers[0];\n        }\n\n        var matchSchemaHandlers = filteredHandlers.filter(filterSchema(req));\n\n        if (matchSchemaHandlers.length > 0) {\n            return matchSchemaHandlers[0];\n        }\n    }\n\n    return null;\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/content.js":"var logger = require('./logger');\nvar lodash = require('lodash');\nvar specSchema= require('./spec-schema');\nvar contentTypeChecker = require('./content-type');\n\nvar isJson = contentTypeChecker.isJson;\n\nvar mediaTypeRe = /^\\s*([^;]+)/i;\n\nfunction getMediaType(contentType) {\n    return contentType.match( mediaTypeRe )[0].toLowerCase();\n}\n\nfunction getMediaTypeFromSpecReq( specReq ) {\n    if( specReq && specReq.headers ) {\n        for( var i = 0; i < specReq.headers.length; i++ ) {\n            if(/content\\-type/i.test( specReq.headers[i].name )) {\n                return getMediaType( specReq.headers[i].value );\n            }\n        }\n    }\n    return null;\n}\n\nfunction getMediaTypeFromHttpReq( httpReq ) {\n    var contentTypeHeader = getHeaderFromHttpReq( httpReq, 'content-type' );\n    if( contentTypeHeader ) {\n        return getMediaType( contentTypeHeader );\n    }\n    return null;\n}\n\nfunction getHeaderFromHttpReq( httpReq, header ) {\n    if ( header in httpReq.headers ) {\n        return httpReq.headers[header];\n    }\n    return null;\n}\n\nfunction getBodyContent(req, parseToJson){\n    var body = null;\n    if (req && req.body) {\n        body = req.body.trim();\n    }\n\n    if (parseToJson){\n        try {\n            body = JSON.parse(body);\n        } catch (e) {\n            logger.log('[WARNING]'.red, 'JSON body could not be parsed. Using body as is.');\n        }\n    }\n\n    return body;\n}\n\nfunction areContentTypesSame(httpReq, specReq) {\n    var actual = getMediaTypeFromHttpReq(httpReq);\n    var expected = getMediaTypeFromSpecReq(specReq);\n\n    var result = !expected || actual === expected;\n    logger.log('[MATCHING]'.yellow,'by request content type:', expected, 'actual:', actual, logger.stringfy(result));\n    return result;\n}\n\nexports.contentTypeComparator = function(specA) {\n\n    function hasContentTypeHeader(spec){\n        if (spec.request && spec.request.headers){\n            return spec.request.headers.filter(function(header){ return header.name.toLowerCase() === 'content-type';}).length > 0;\n        }\n        return false;\n    }\n\n    return !hasContentTypeHeader(specA)? 1 : -1;\n};\n\nexports.matchesBody = function(httpReq, specReq) {\n    if (!specReq) {\n        return true;\n    }\n\n    var contentType = getMediaTypeFromHttpReq(httpReq);\n\n    if (contentTypeChecker.isMultipart(contentType)) {\n        return true;\n    }\n\n    var reqBody = getBodyContent(httpReq, isJson(contentType));\n    var specBody = getBodyContent(specReq, isJson(contentType));\n    var result = lodash.isEqual(reqBody, specBody);\n\n    logger.log('[MATCHING]'.yellow,'by request body content', logger.stringfy(result));\n    return result;\n};\n\nexports.matchesSchema = function(httpReq, specReq) {\n    if (!specReq){\n        return true;\n    }\n\n    var contentType = getMediaTypeFromHttpReq(httpReq);\n    var reqBody = getBodyContent(httpReq, isJson(contentType));\n    var result =  specSchema.matchWithSchema(reqBody, specReq.schema);\n    logger.log('[MATCHING]'.yellow,'by request body schema', logger.stringfy(result));\n    return result;\n};\n\nexports.matchesHeader = function(httpReq, specReq, ignoreHeaders) {\n    if (!specReq || !specReq.headers){\n        return true;\n    }\n\n    ignoreHeaders = (ignoreHeaders && ignoreHeaders.map(function (header) {\n      return header.toLowerCase();\n    })) || [];\n\n    function shouldIgnoreHeader(headerName){\n        return ignoreHeaders.indexOf(headerName.toLowerCase()) > -1;\n    }\n\n    function headersForEvaluation(header) {\n        return header.name &&\n                (header.name.toLowerCase() !== 'content-type' &&\n                !shouldIgnoreHeader(header.name));\n    }\n\n    function containsHeader( header ){\n        var httpReqHeader = header.name.toLowerCase();\n        var result = httpReq.headers.hasOwnProperty(httpReqHeader) &&\n          httpReq.headers[httpReqHeader] === header.value;\n\n        logger.log('[MATCHING]'.yellow,'by request header', httpReqHeader, '=', header.value, logger.stringfy(result));\n        return result;\n    }\n\n    return specReq.headers.filter(headersForEvaluation).every(containsHeader) &&\n      (shouldIgnoreHeader('content-type') || areContentTypesSame(httpReq, specReq));\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/content-type.js":"function match(regex, contentType) {\n    return contentType ? regex.test(contentType) : false;\n}\n\nexports.isJson = function(contentType) {\n    return match(/json/i, contentType);\n};\n\nexports.isMultipart = function(contentType) {\n    return match(/multipart\\/form-data/i, contentType);\n};\n\nexports.isFormUrlEncoded = function(contentType) {\n    return match(/application\\/x-www-form-urlencoded/i, contentType);\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/query-comparator.js":"var _ = require('lodash');\n\nexports.noParamComparator = function(a, b){\n    return (Object.keys(a.parsedUrl.queryParams).length - Object.keys(b.parsedUrl.queryParams).length);\n};\n\nexports.queryParameterComparator = function(a, b){\n    if (b.matchingQueryParams === a.matchingQueryParams){\n        if (b.exactMatchingQueryParams === a.exactMatchingQueryParams){\n            return (a.nonMatchingQueryParams - b.nonMatchingQueryParams);\n        }\n        return (b.exactMatchingQueryParams - a.exactMatchingQueryParams);\n    }\n    return (b.matchingQueryParams - a.matchingQueryParams);\n};\n\nexports.countMatchingQueryParms = function (handlers, reqQueryParams){\n    handlers.forEach(function(handler){\n        handler.matchingQueryParams = 0;\n        handler.exactMatchingQueryParams = 0;\n        handler.nonMatchingQueryParams = 0;\n        var specQueryParams = handler.parsedUrl.queryParams;\n        for(var param in specQueryParams){\n            var value = specQueryParams[param];\n            if (reqQueryParams.hasOwnProperty(param)){\n                var reqValue = reqQueryParams[param];\n                if (_.isEqual(value, reqValue)){\n                    handler.matchingQueryParams += 1;\n                    handler.exactMatchingQueryParams += 1;\n                }else if (value === ''){\n                    handler.matchingQueryParams += 1;\n                }\n            }else{\n                handler.nonMatchingQueryParams +=1;\n            }\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/middleware/response.js":"require('colors');\nvar logger = require('../logger');\n\nexports.delayedResponse = function(delay){\n    return function(req, res, next){\n        if(!delay){\n            return next();\n        }\n        logger.log('[DELAY]'.yellow, delay+'ms');\n        setTimeout(next, delay);\n    };\n};\n\nexports.drakovHeaders = function(req, res, next) {\n    res.set('X-Powered-By', 'Drakov API Server');\n    next();\n};\n\nexports.corsHeaders = function(disableCORS, allowHeaders) {\n    return function(req, res, next) {\n        if (!disableCORS) {\n            res.set('Access-Control-Allow-Origin', req.headers.origin || '*');\n            res.set('Access-Control-Allow-Credentials', 'true');\n\n            if (allowHeaders) {\n                var headers = Array.isArray(allowHeaders) ? allowHeaders.join(',') : allowHeaders;\n                res.set('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, ' + headers);\n            } else {\n                res.set('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n            }\n        }\n        next();\n    };\n};\n\nexports.allowMethods = function(allowMethods) {\n    return function(req, res, next) {\n        if (allowMethods) {\n            var methods = Array.isArray(allowMethods) ? allowMethods.join(',') : allowMethods;\n            res.set('Access-Control-Allow-Methods', methods);\n        }\n        next();\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/middleware/static.js":"var path = require('path');\nvar express = require('express');\nrequire('colors');\n\nvar logger = require('../logger');\n\n// route object example\n// { path: '/path/to/static/files', mount: '/www/mount/path' }\n// 'mount' property is optional and may be undefined or null\nvar setupStaticRoute = function(app, route) {\n    var resolvedPath = path.resolve(route.path.trim());\n    var message = 'Setup static path: ' + resolvedPath.yellow;\n    if (route.mount) {\n        message += ' from url ' + route.mount.blue;\n        app.use(route.mount, express.static(resolvedPath));\n    } else {\n        app.use(express.static(resolvedPath));\n    }\n    logger.log(message);\n};\n\nvar splitPathValues = function(pathValue, pathDelimiter) {\n    if (!pathDelimiter) {\n        pathDelimiter = '=';\n    }\n    var values = pathValue.split(pathDelimiter);\n    return {\n        path: values[0],\n        mount: values[1] ? values[1] : null\n    };\n};\n\nexports.setupRoutes = function(app, routeList, pathDelimiter) {\n    var processRoute = function(routeString) {\n        setupStaticRoute(app, splitPathValues(routeString, pathDelimiter));\n    };\n\n    if (Array.isArray(routeList)) {\n        routeList.forEach(processRoute);\n    } else {\n        processRoute(routeList);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/debugRequest.js":"var logger = require('./logger');\nvar contentTypeChecker = require('./content-type');\n\nexports.notFoundHandler = function(argv) {\n\n    function debug(req){\n\n        function getBody(req) {\n            if (contentTypeChecker.isJson(req.get('Content-Type'))){\n                try {\n                    return JSON.parse(req.body);\n                } catch (e) {\n                    return req.body;\n                }\n            }\n            return req.body;\n        }\n\n        var debugObj = {\n            originalUrl: req.originalUrl,\n            body: getBody(req),\n            method: req.method,\n            headers: req.headers,\n            query: req.query\n        };\n\n        return debugObj;\n\n    }\n\n    return function (req, res) {\n        if (!res.headersSent){\n            if (argv.debugMode) {\n                var debugRequest = debug(req);\n                logger.log('[DEBUG]'.yellow, 'mismatching request:', JSON.stringify(debugRequest));\n                res.status(404).json(debugRequest);\n                return;\n            }\n            res.status(404).send('Endpoint not found');\n        }\n    };\n\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/Gruntfile.js":"module.exports = function (grunt) {\n\n    grunt.initConfig({\n\n        jshint: {\n            options: {\n                jshintrc: true,\n                ignores: [\n                    'describe',\n                    'it'\n                ]\n            },\n            files: [\n                'lib/**/*.js',\n                'test/**/*.js',\n                'index.js'\n            ]\n        },\n\n        simplemocha: {\n            options: {\n                globals: ['should'],\n                timeout: 3000,\n                ignoreLeaks: false,\n                ui: 'bdd',\n                reporter: 'tap'\n            },\n            api: {src: 'test/api/*-test.js'},\n            unit: {src: 'test/unit/*-test.js'}\n        },\n        'blueprint-validator': {\n            'contract-test':{\n                mdFiles: 'test/example/**/*.md',\n                failOnWarnings: true\n            }\n        }\n    });\n\n    // For this to work, you need to have run `npm install grunt-simple-mocha`\n    grunt.loadNpmTasks('grunt-simple-mocha');\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-blueprint-validator');\n\n    grunt.task.registerTask('unit-test', ['simplemocha:unit']);\n    grunt.task.registerTask('test', ['blueprint-validator', 'simplemocha:api', 'simplemocha:unit']);\n    grunt.task.registerTask('default', ['jshint', 'test']);\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/watcher.js":"var chokidar = require('chokidar');\nrequire('colors');\n\nvar drakov = require('./drakov');\n\n// Save these for replay later\nvar CACHED_ARGV = [];\n\nvar RESTART_COUNT = 0;\n\nvar changeHandler = function(filePath) {\n    ++RESTART_COUNT;\n    console.log('[CHANGE]'.white, filePath.green, ('Restarting ' + RESTART_COUNT).blue);\n    drakov.stop(function(){\n        drakov.run(CACHED_ARGV);\n    });\n};\n\nmodule.exports = function(argv) {\n    if (!argv.watch) {\n        return;\n    }\n\n    console.log(' FILE SPY '.grey.inverse + '  ACTIVE  '.green.inverse);\n\n    CACHED_ARGV = argv;\n    var sourceFiles = argv.sourceFiles;\n\n    var watcher = chokidar.watch(sourceFiles);\n    watcher.on('change', changeHandler);\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/arguments/arguments.js":"module.exports = {\n    sourceFiles: {\n        alias: 'f',\n        description: 'Glob expression to select spec files.'\n    },\n    serverPort: {\n        alias: 'p',\n        description: 'Specifies the port to be listened by Drakov server',\n        default: 3000\n    },\n    staticPaths: {\n        alias: 's',\n        description: 'A list of comma delimited paths to use for static file proxying'\n    },\n    pathDelimiter: {\n        alias: 'd',\n        description: 'Delimiter for mount point in static path (defaults is \"=\")'\n    },\n    stealthmode: {\n        description: 'Run silent (no console output)'\n    },\n    disableCORS: {\n        description: 'Disable CORS header'\n    },\n    sslKeyFile: {\n        description: 'Key File for SSL connections'\n    },\n    sslCrtFile: {\n        description: 'Certificate File for SSL connections'\n    },\n    delay: {\n        description: 'Add a delay to the response (in milliseconds)'\n    },\n    method: {\n        description: 'Add method to Access-Control-Allow-Methods response header'\n    },\n    header: {\n        description: 'Add header to Access-Control-Allow-Headers response header'\n    },\n    public: {\n        description: 'Allow external requests',\n        default: false\n    },\n    autoOptions: {\n        description: 'Automatically respond to OPTIONS requests for routes in spec files'\n    },\n    config: {\n        description: 'Load configuration from a Javascript file, must export an object'\n    },\n    discover: {\n        description: 'List all available endpoints under `/drakov`. If value of argument is a module name, it will be required and called to create a middleware function',\n        alias: 'D',\n        default: false\n    },\n    watch: {\n        description: 'Reload Drakov when change detected in list of source files'\n    },\n    debugMode: {\n        description: 'Enables DEBUG mode. Mismatch requests will be dumped'\n    },\n    ignoreHeader: {\n        description: 'Ignore the HTTP header in API blueprints'\n    }\n\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/arguments/index.js":"var path = require('path');\nvar argv = require('yargs');\n\nvar logger = require('../logger');\nvar yargsConfigOptions = require('./arguments');\n\nvar RC_FILE = '.drakovrc';\n\nfunction addDefaultValue(args) {\n    return function(argKey) {\n        var defaultValue = yargsConfigOptions[argKey].default;\n        if (!args[argKey] && defaultValue !== undefined) {\n            args[argKey] = defaultValue;\n        }\n    };\n}\n\nfunction loadConfiguration() {\n    var args = argv.options({config: {}}).argv;\n    if (args.config) {\n        return loadConfigFromModule(args.config, '');\n    } else {\n        var paths = getPathsFromCwd();\n        for (var i = 0; i < paths.length; i++) {\n            var config = loadConfigFromModule(RC_FILE, paths[i]);\n            if (config) {\n                return config;\n            }\n        }\n        return loadConfigFromModule(RC_FILE, process.cwd());\n    }\n}\n\nfunction loadConfigFromModule(filePath, cwd) {\n    var searchPath = path.resolve(cwd + filePath);\n    var loadedArgs;\n    try {\n        loadedArgs = require(searchPath);\n    } catch (e) {\n        return;\n    }\n    logger.log('Loading Configuration:', searchPath.white);\n    logger.log('WARNING'.red, 'All command line arguments will be ignored');\n    var processDefaultOptionsFn = addDefaultValue(loadedArgs);\n    Object.keys(yargsConfigOptions).forEach(processDefaultOptionsFn);\n    return loadedArgs;\n}\n\nfunction getPathsFromCwd() {\n    var pathComponents = process.cwd().split('/');\n    var paths = [];\n    for (var i = pathComponents.length; i > 0; i--) {\n        paths.push(pathComponents.slice(0, i).concat(['']).join('/'));\n    }\n    return paths;\n}\n\nfunction loadCommandlineArguments() {\n    console.log('[INFO]'.white, 'No configuration files found');\n    console.log('[INFO]'.white, 'Loading configuration from CLI');\n    return argv\n        .usage('Usage: \\n  ./drakov -f <path to blueprint> [-p <server port|3000>]' +\n        '\\n\\nExample: \\n  ' + './drakov -f ./*.md -p 3000')\n        .options(yargsConfigOptions)\n        .demand('f')\n        .wrap(80)\n        .argv;\n}\n\nexports.getArgv = function() {\n    var preloadedArgs = loadConfiguration();\n    if (preloadedArgs) {\n        return preloadedArgs;\n    }\n    return loadCommandlineArguments();\n};\n","/home/travis/build/npmtest/node-npmtest-drakov/node_modules/drakov/lib/middleware/discover.js":"var buildRouteMap = require('./route-map');\n\nmodule.exports = function(sourceFiles) {\n    return function(req, res, next) {\n        if (res.headersSent) {\n            return next();\n        }\n        buildRouteMap(sourceFiles, function(err, routeMap) {\n            if (err) {\n                return next(err);\n            } else {\n                res.render('discover', {\n                    routes: Object.keys(routeMap)\n                });\n            }\n        });\n    };\n};\n"}